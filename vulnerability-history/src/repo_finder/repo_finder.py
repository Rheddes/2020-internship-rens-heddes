import logging
from datetime import datetime

from mysql.connector import connect
from pytz import utc

from utils.core import Status
from utils.libraries_api import find_repos_with_fixed_versions_for
from utils.runner import Runner


class RepoFinder(Runner):
    def _add_repos_to_db(self, repos, cve):
        repos = [{**repo, 'cve': cve}for repo in repos]
        with self._connection.cursor() as cursor:
            cursor.executemany(
                'INSERT INTO repos (full_name, pom_path, cve) VALUES (%(full_name)s, %(pom_path)s, %(cve)s)',
                repos
            )
            cursor.execute(f"UPDATE vulnerabilities SET status='{Status.DONE}' WHERE cve=%s", [cve])
        self._connection.commit()

    def run_once(self):
        with self._connection.cursor() as cursor:
            cursor.execute(f"""
                SELECT v.cve, package_coords, libraries_io_find_prefix, samples, first_fix_release_date
                FROM vulnerabilities as v
                LEFT JOIN repos r ON r.cve = v.cve
                WHERE v.status = '{Status.NEW}'
                GROUP BY r.cve
            """)
            for (cve, package_coords, search_prefix, wanted_samples, first_fix_release_date) in cursor:
                first_fix_release_date = datetime.combine(first_fix_release_date, datetime.min.time(), utc)
                self._logger.info('Finding {} new repos for {}'.format(wanted_samples, cve))
                repos = find_repos_with_fixed_versions_for(package_coords, first_fix_release_date, wanted_samples)
                self._add_repos_to_db(repos, cve)
            self._logger.info('No more vulnerabilities to find repos for')


if __name__ == '__main__':
    logging.getLogger().setLevel(logging.DEBUG)
    with connect(host='127.0.0.1', port=33061, user='vulnerability-history', database='vulnerability-history',
                 password='secret') as conn:
        repo_finder = RepoFinder(conn, logging.getLogger())
        repo_finder.run_once()

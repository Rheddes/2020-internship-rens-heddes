from sqlalchemy import create_engine
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import mysql


def scatter_dist():
    query = """
        SELECT u.*, r.full_name, v.package_coords, v.first_fix_release_date FROM updates u
        INNER JOIN repos r ON u.repo_id = r.id
        INNER JOIN vulnerabilities v on u.cve = v.cve
        WHERE is_fork = 0 AND cvss_v3 IS NOT NULL
    """
    df = pd.read_sql(query, con=db_connection, parse_dates=['commit_date', 'old_release_date', 'new_release_date'])
    df = df[df['update_delay'] > 50]
    sns.regplot(data=df, x='update_delay', y='cvss_v3', logx=True, ci=None)
    plt.title('Impact of CVSS score associated with vulnerability patch\n and update delay')
    plt.xlabel('Update delay to fixed version (days)')
    plt.ylabel('CVSS score of patched vulnerability')
    plt.show()


if __name__ == '__main__':
    db_connection_str = 'mysql+mysqlconnector://vulnerability-history:secret@localhost:33062/vulnerability-history'
    db_connection = create_engine(db_connection_str)

    scatter_dist()

    # query = """
    #     SELECT u.*, r.full_name, v.package_coords, v.first_fix_release_date FROM updates u
    #     INNER JOIN repos r ON u.repo_id = r.id
    #     INNER JOIN vulnerabilities v on u.cve = v.cve
    #     WHERE is_fork = 0
    # """
    # df = pd.read_sql(query, con=db_connection, parse_dates=['commit_date', 'old_release_date', 'new_release_date'])
    #
    # dom4j_all_updates = df[df['cve'] == 'CVE-2020-10683']
    # dom4j_patch_updates = dom4j_all_updates[dom4j_all_updates['is_fix_update'] == 1]
    #
    # compress_all_updates = df[df['cve'] == 'CVE-2019-12402']
    # compress_patch_updates = compress_all_updates[compress_all_updates['is_fix_update'] == 1]
    # # sns.ecdfplot(dom4j_all_updates['update_delay'])
    # # plt.show()
    # # print(dom4j_all_updates.quantile(0.6))
    # # print(dom4j_all_updates.quantile(0.8))
    #
    # sns.ecdfplot(dom4j_all_updates['update_delay'], color=sns.color_palette()[0])
    # sns.ecdfplot(dom4j_patch_updates['update_delay'], color=sns.color_palette()[1])
    # plt.legend(labels=['overall update delay', 'dom4j patch fix delay'])
    # plt.xlim(0, 1500)
    # plt.title('Update distribution for repositories which use dom4j')
    # plt.tight_layout()
    # plt.show()
    # sns.ecdfplot(compress_all_updates['update_delay'], color=sns.color_palette()[0])
    # sns.ecdfplot(compress_patch_updates['update_delay'], color=sns.color_palette()[1])
    # plt.legend(labels=['overall update delay', 'apache compress patch fix delay'])
    # plt.xlim(0, 1500)
    # plt.title('Update distribution for repositories which\n use Apache Commons-compress')
    # plt.tight_layout()
    # plt.show()
    # # print(dom4j_patch_updates.quantile(0.6))
    # # print(dom4j_patch_updates.quantile(0.8))
    # # sns.displot(dom4j_all_updates['update_delay'], kde=True, binwidth=5)
    # # plt.show()
    # # sns.displot(dom4j_all_updates['update_delay'], kind='kde', bw_adjust=0.25)
    # # plt.show()
    # # sns.displot(dom4j_patch_updates['update_delay'], kde=True, binwidth=5)
    # # plt.show()
    # # sns.displot(dom4j_patch_updates['update_delay'], kind='kde', bw_adjust=0.25)
    # # plt.show()
    # # sns.displot(compress_patch_updates['update_delay'], kind='kde', bw_adjust=0.25)
    # # plt.show()
    # # commit_counts = dom4j_all_updates.groupby(['commit_hash']).agg(len)
    # # sns.displot(commit_counts['id'], binwidth=3)
    # # plt.xlabel('Number of updates in commit')
    # # plt.xlim(0, 200)
    # # plt.show()
    # # sns.displot(commit_counts['id'], binwidth=1)
    # # plt.xlabel('Number of updates in commit')
    # # plt.xlim(0, 50)
    # # plt.show()
    # # print(commit_counts)
    #
    # commits = df.groupby('commit_date').count().sort_values(by='commit_date', ascending=True)
    # commits_keycloak = dom4j_all_updates[dom4j_all_updates['repo_id'] == 83].groupby('commit_date').count().sort_values(by='commit_date', ascending=True)
    # commits['monthly_commit_average'] = commits.commit_hash.rolling(28).mean().shift(-3)
    # commits_keycloak['weekly_commit_average'] = commits_keycloak.commit_hash.rolling(7).mean().shift(-3)
    #
    # sns.displot(data=dom4j_all_updates, x='commit_date', kind='kde')
    # plt.title('Updates performed')
    # # sns.lineplot(data=commits,
    # #              x='commit_date',
    # #              y='monthly_commit_average').set_title('Commits')
    # plt.tight_layout()
    # plt.show()
    # # interesting_repo_ids = [62, 98, 108, 112]
    # interesting_repo_ids = [62, 45, 78, 69]
    # for repo_id in interesting_repo_ids:
    #     repo_commits = df[df['repo_id'] == repo_id]
    #     repo_name = repo_commits['full_name'].iloc[0]
    #     print(repo_name)
    #     sns.displot(data=repo_commits, x='commit_date', kind='kde')
    #     plt.title('Updates ({}) in {}'.format(len(repo_commits), repo_name))
    #     plt.tight_layout()
    #     plt.show()

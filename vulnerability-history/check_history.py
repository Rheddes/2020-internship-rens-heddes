#!/usr/bin/env python

import os
import subprocess

import ijson
from git import Repo
from pydriller import RepositoryMining

BASE_DIR = os.path.dirname(os.path.abspath(__file__))


def get_package_name(dependency):
    if len(dependency['packages']) > 0:
        return dependency['packages'][0]['id']
    return dependency['fileName']


def extract_vulnerabilities(report_location):
    vulnerabilities = dict()
    with open(report_location) as file:
        dependencies = list(ijson.items(file, 'dependencies'))[0]
        for dependency in dependencies:
            if 'vulnerabilities' in dependency:
                vulnerabilities[get_package_name(dependency)] = dependency['vulnerabilities']
    return vulnerabilities


if __name__ == '__main__':
    if not os.path.exists(BASE_DIR + '/out'):
        os.mkdir(BASE_DIR + '/out')
    repo = Repo(os.getcwd())
    commits = list(RepositoryMining(os.getcwd(), filepath='pom.xml').traverse_commits())

    vulnerability_history = dict()
    for commit in commits[0:5]:
        print('----------COMMIT---------')
        print('HASH: ', commit.hash)
        print()
        print(commit.msg)
        print('-------------------------')
        repo.git.checkout(commit.hash)
        process = subprocess.Popen([BASE_DIR + '/check_version_for_vulnerabilities.sh', BASE_DIR], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        process.wait()
        version_vulnerabilities = extract_vulnerabilities(os.getcwd() + '/target/dependency-check-report.json')
        for dependency, vulnerabilities in version_vulnerabilities.items():
            for vulnerability in vulnerabilities:
                if vulnerability['name'] not in vulnerability_history:
                    vulnerability_history[vulnerability['name']] = {'package': dependency, 'hashes': []}
                vulnerability_history[vulnerability['name']]['hashes'].append(commit.hash)

    print(vulnerability_history)
